---
# Sample Task 1: Creating a new user
- name: Create new user
  ansible.builtin.user:
    name: "{{ linux.linux_user }}"
    password: "{{ linux.linux_password | password_hash('sha512') }}"
    group: root
  ignore_errors: true

# Sample Task 2: Distribute SSH key to users
- name: Distribute SSH public key
  block:
    - name: Get SSH public key content
      ansible.builtin.set_fact:
        ssh_key_content: "{{ lookup('file', linux.sshkey_filename) }}"
      ignore_errors: true

    - name: Print output from previous task
      ansible.builtin.debug:
        msg: "{{ output }}"
      tags:
        - debug

    - name: Add SSH keys to root user
      ansible.builtin.lineinfile:
        path: /root/.ssh/authorized_keys
        line: "{{ ssh_key_content }}"
        create: true
        mode: '0600'
      ignore_errors: true

    - name: Print output from previous task
      ansible.builtin.debug:
        msg: "{{ output }}"
      tags:
        - debug

    - name: Get a list of all users
      ansible.builtin.getent:
        database: passwd
      register: users

    - name: Create .ssh directory for each user
      ansible.builtin.file:
        path: "/home/{{ item.key }}/.ssh"
        state: directory
        owner: "{{ item.key }}"
        mode: '0700'
      loop: "{{ lookup('dict', users.ansible_facts.getent_passwd) }}"
      when:
        - item.key != 'root'
        - item.value[1] >= '1000'
        - item.value[4] | regex_search('^/home/')

    - name: Create authorized_keys file for each valid user
      ansible.builtin.file:
        path: "/home/{{ item.key }}/.ssh/authorized_keys"
        state: touch
        mode: '0600'
      loop: "{{ lookup('dict', users.ansible_facts.getent_passwd) }}"
      when:
        - item.key != 'root'
        - item.value[1] >= '1000'
        - item.value[4] | regex_search('^/home/')

    - name: Write SSH public key into authorized_keys file for each valid user
      ansible.builtin.lineinfile:
        path: "/home/{{ item.key }}/.ssh/authorized_keys"
        line: "{{ ssh_key_content }}"
        owner: "{{ item.key }}"
        mode: '0600'
      loop: "{{ lookup('dict', users.ansible_facts.getent_passwd) }}"
      when:
        - item.key != 'root'
        - item.value[1] >= '1000'
        - item.value[4] | regex_search('^/home/')
